fn main() {
    testVariables()
    print getFloats(2#f, 5)
    print getObjects()
    print TestClass.getPlusTwoCommaTwo(4)
    print iAlwaysReturnInt()
}

fn testVariables() {
    let i = 0
    let f: float = 0
    let s: short = 0#s
    let b: byte = 0#b
    let o = TestClass()
    let sum = i + f
    sum = (sum := sum + b) + s
    const cSum = sum * 2#S
    let fs: float[] = [4#f, 3#f, 2#f, 1#f, 0#f, 0#f, 0#f, 0#f]
    let ints = int[5]
    ints[ints.size - 1] = 4#b
    ints[ints.size - 2] = 4#s
    fs[fs.size - 1] = 1#b
    fs[fs.size - 2] = 1#s
    fs[fs.size - 3] = 1#i
    fs[fs.size - 4] = 1#f
    fs[fs.size - 5] = 1.0
}

fn getFloats(init: float, length: int): float[] {
    const toRet = float[length]
    let i = -1
    while ((i := i + 1) < length) toRet[i] = init
    return toRet
}

fn getObjects(): TestClass[] {
    return [TestClass(), TestClass(), TestClass()]
}

class TestClass {
    field privateField: byte[] = [4#b, 3#b, 1#b]
    public field publicField: float = 3#f
    static field staticPrivateField: TestClass[] = TestClass[0]
    public static field myFloats: float[] = float[20]

    fn getShort(): short {
        return 2#b
    }

    public static fn getPlusTwoCommaTwo(val: int): float {
        return val + TestClass().getShort() + 0.2#f
    }
}

fn iAlwaysReturnInt(): int {
    loop {
        if (2 % 2 == 0) return 343924
        else if (3 % 3 == 0) return -23123
        else return 1#s
    }
}
