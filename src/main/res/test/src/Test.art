const field numHiSayers: int = 10

fn main() {
    const hiSayerFactory = HiSayerFactory()
    hiSayerFactory.numInstances = numHiSayers
    const hiSayers = hiSayerFactory.getInstances()
    let i = -1
    while ((i := i + 1) < hiSayers.size) hiSayers[i].sayHi()
}

class HiSayerFactory {
    public field numInstances: int = 0

    public fn getInstances(): HiSayer[] {
        const toRet = HiSayer[this.numInstances]
        let i = -1
        while ((i := i + 1) < this.numInstances) toRet[i] = HiSayer()
        return toRet
    }
}

class HiSayer {
    public fn sayHi() {
        print "Hi"
    }
}

//
//
///**
//* the most stupid possible implementation of fibonacci
//*/
//fn recFibonacci(pos: int): int {
//    if (pos <= 2) return 1 else return recFibonacci(pos - 1) + recFibonacci(pos - 2)
//}
//
//fn fizzBuzz() {
//    let i = 0
//    while ((i := i + 1) <= 100) {
//        let output = ""
//        let isEmpty = true
//        if (i % 3 == 0) {
//            output = "Fizz"
//            isEmpty = false
//        }
//        if (i % 5 == 0) {
//            output += "Buzz"
//            isEmpty = false
//        }
//        if (isEmpty) print i else print output
//    }
//}
