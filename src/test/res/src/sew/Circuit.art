
abstract class Circuit {

    public abstract fn getResistance(): double

}

class Resistor : Circuit {

    field resistance: double

    public constructor(field resistance)

    public override fn getResistance(): double {
        return this.resistance
    }

}

class SerialCircuit : Circuit {

    field c1: Circuit
    field c2: Circuit

    public constructor(field c1, field c2)

    public override fn getResistance(): double {
        return this.c1.getResistance() + this.c2.getResistance()
    }

}


fn main() {
    const c1: Circuit = Resistor(100#D)
    printCircuit(c1, "c1")

    const c2: Circuit = SerialCircuit(Resistor(100#D), Resistor(200#D))
    printCircuit(c2, "c2")
}

fn printCircuit(c: Circuit, name: str) {
    printNNl(name + " = ")
    printNNl(c.getResistance())
    print " Î©"
}

fn printNNl(s: str) {
    System.out.printNoNl(s)
}

fn printNNl(d: double) {
    System.out.printNoNl(d)
}
